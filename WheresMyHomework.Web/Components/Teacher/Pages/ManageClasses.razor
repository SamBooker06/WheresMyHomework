@using System.ComponentModel.DataAnnotations
@using WheresMyHomework.Core.Services.Class
@using WheresMyHomework.Core.Services.Homework.DTO.Response
@using WheresMyHomework.Core.Services.SubjectService
@using WheresMyHomework.Web.Components.Common

@inject IClassService ClassService
@inject IStudentService StudentService
@inject ISubjectService SubjectService
@inject NavigationManager Navigator
@inject ILogger<ManageClasses> Logger

@page "/Classes"

@rendermode InteractiveServer

<PageTitle>Manage your classes | WMH</PageTitle>

@if (_teacher is not null
     && _classes is not null
     && _students is not null
     && _subjects is not null)
{
    <div class="container-fluid">
        <div class="row">
            <main class="col-md-6">
                <article class="card p-3">
                    <button class="btn btn-primary my-3" @onclick="DisplayClassCreator">Create class</button>

                    <ul class="list-group">

                        @foreach (var cls in _classes)
                        {
                            <li class="list-group-item">
                                <div class="d-flex justify-content-between align-items-center text-center">
                                    <h5 class="fw-semibold text-info-emphasis d-inline" style="margin: 0;">@cls.Name</h5>
                                    <button class="btn btn-outline-primary" @onclick="() => GoToClassManagementAsync(cls.Id)">Manage</button>
                                </div>
                            </li>
                        }
                    </ul>
                </article>
            </main>

            @if (_displayClassCreator)
            {
                <aside class="col-md-6">
                    @if (_hasCreatedClass)
                    {
                        <div class="alert alert-success">
                            <p>Created class!</p>
                        </div>
                    }

                    <article class="card p-3">
                        <h5 class="card-title">Create class</h5>

                        <EditForm FormName="CreateClass" Model="NewClass" OnValidSubmit="CreateNewClassAsync">
                            <DataAnnotationsValidator/>
                            <ValidationSummary/>

                            <div class="col-md-6 form-floating mb-3">
                                <InputText class="form-control" placeholder=" " id="class-name-input"
                                           @bind-Value="NewClass.Name"/>
                                
                                <label for="class-name-input" class="form-label">Class name</label>
                            </div>

                            <div class="col-md-6 form-floating mb-3">
                                <InputSelect id="subject-input" class="form-control form-select" placeholder=" " TValue="int"
                                             @bind-Value="NewClass.SubjectId">
                                    @foreach (var subject in _subjects)
                                    {
                                        <option value="@subject.Id">@subject.Name</option>
                                    }
                                </InputSelect>
                                <label for="subject-input" class="form-label">Subject</label>
                            </div>

                            <div class="col-md-6 form-floating mb-3">
                                <MultiSelect CssClass="my-2" TItem="UserInfo" Title="Students" Items="_students"
                                             SelectedItems="NewClass.Students"
                                             ItemTransformer=@(student => $"{student.LastName}, {student.FirstName}") MaxHeight="40"/>

                                <button class="btn btn-primary w-100" type="submit">Create!</button>
                            </div>

                        </EditForm>

                    </article>
                </aside>
            }
        </div>
    </div>
}
else
{
    <p class="text-danger">There was a problem getting your info</p>
}

@code {
    private TeacherInfo? _teacher;
    private IEnumerable<UserInfo>? _students;
    private IEnumerable<SchoolClassResponseInfo>? _classes;
    private IEnumerable<SubjectResponseInfo>? _subjects;

    private NewClassModel NewClass { get; set; } = new();

    private bool _hasCreatedClass;
    private bool _displayClassCreator;

    protected override async Task OnInitializedAsync()
    {
        var teacherAuth = await TeacherAuthService.GetAuthenticatedUserInfoAsync();
        if (teacherAuth is null)
        {
            Logger.LogError("TeacherAuth was null. Is the user signed in?");
            return;
        }

        _teacher = await TeacherService.GetTeacherInfoAsync(teacherAuth.UserId);
        _classes = await ClassService.GetClassByTeacherAsync(_teacher.Id);
        _students = (await StudentService.GetStudentsBySchoolAsync(_teacher.SchoolId)).OrderBy(student => student.LastName + student.LastName);
        _subjects = await SubjectService.GetSubjectsAsync(_teacher.SchoolId);
    }

    private void DisplayClassCreator()
    {
        _displayClassCreator = true;
    }

    private async Task CreateNewClassAsync()
    {
        if (_teacher is null)
        {
            Logger.LogError("Teacher is null while creating a new class");
            return;
        }

        await ClassService.CreateClassAsync(new CreateClassInfo
        {
            ClassName = NewClass.Name,
            SubjectId = NewClass.SubjectId,
            TeacherId = _teacher.Id,
            StudentIds = NewClass.Students.Select(student => student.Id).ToList()
        });


        _hasCreatedClass = true;
        NewClass = new NewClassModel();
    }


    private class NewClassModel
    {
        [MinLength(2), MaxLength(15)] public string Name { get; set; } = string.Empty;

        public List<UserInfo> Students = [];

        [Required] public int SubjectId { get; set; }
    }

    private void GoToClassManagementAsync(int classId)
    {
        Navigator.NavigateTo($"/Classes/{classId}");
    }

}