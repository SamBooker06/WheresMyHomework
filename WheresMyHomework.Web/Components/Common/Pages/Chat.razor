@using Microsoft.AspNetCore.Authorization
@using WheresMyHomework.Core.Services.Users

@page "/Chat/{ReceiverUserId}/{*_}"
@page "/Chat/{ReceiverUserId}"
@page "/Chat"

@inject IStudentService StudentService
@inject ITeacherService TeacherService
@inject IStandardUserService StandardUserService

@attribute [Authorize(Roles = "Student,Teacher")]

@rendermode InteractiveServer

<PageTitle>@pageTitle</PageTitle>

@if (sender is null || receiver is null)
{
    <h5 class="text-danger">A user must be provided</h5>
}
else
{
    <div class="h-100 m-2 d-flex flex-column align-items-center">
        <Messenger Sender="sender" Receiver="receiver"/>
    </div>
}

@code {
    [Parameter] public string? ReceiverUserId { get; set; }
    [Parameter] public string? _ { init; get; }
    
    private UserInfo? sender;
    private UserInfo? receiver;

    private string pageTitle = "There was a problem loading your chat | WMH";

    protected override async Task OnInitializedAsync()
    {
        if (ReceiverUserId is null) return;
        
        if (await StudentAuthService.IsAuthenticatedAsync())
        {
            var authInfo = await StudentAuthService.GetAuthenticatedUserInfoAsync();
            if (authInfo is null) return;

            sender = await StudentService.GetStudentInfoAsync(authInfo.UserId);
        } 
        else if (await TeacherAuthService.IsAuthenticatedAsync())
        {
            var authInfo = await TeacherAuthService.GetAuthenticatedUserInfoAsync();
            if (authInfo is null) return;

            sender = await TeacherService.GetTeacherInfoAsync(authInfo.UserId);
        }

        receiver = await StandardUserService.GetUserInfoAsync(ReceiverUserId);
        if (receiver is null) return;

        pageTitle = $"Your chat with {receiver.Title}. {receiver.LastName} | WMH";

    }

}