@typeparam TItem where TItem : notnull

<div class="dropdown @CssClass">
    @* Toggle dropdown *@
    <button class="btn btn-outline-secondary dropdown-toggle w-100" type="button" @onclick="ToggleDropdown">
        @Title
    </button>

    @* Dropdown *@
    <div class="dropdown-menu  @DropdownClass overflow-y-scroll"
         style=@(MaxHeight is null ? "" : $"max-height: {MaxHeight}rem; min-height: 3rem;")>
        @* Display this if there are no available items *@
        @if (!Items.Any())
        {
            <div class="dropdown-item">
                <p class="fst-italic">Looks like there's nothing here</p>
            </div>
        }

        @* List available items *@
        @foreach (var item in Items)
        {
            <div class="dropdown-item" @onclick="() => ToggleSelection(item)">
                @* Prevent default is used as otherwise the inputs will fire their own methods alongside the checked event *@
                
                <input class="form-check-input px-1" type="checkbox" id="@GetItemId(item)" checked="@IsSelected(item)"
                       @onclick:preventDefault="true"/>

                <label class="form-check-label ps-2" for="@GetItemId(item)" style="user-select: none;"
                       @onclick:preventDefault="true">
                    @ItemTransformer(item)
                </label>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = "Select Items";
    [Parameter] public IEnumerable<TItem> Items { get; set; } = [];
    [Parameter] public ICollection<TItem> SelectedItems { get; set; } = [];
    [Parameter] public Func<TItem, string> ItemTransformer { get; set; } = item => item.ToString() ?? string.Empty;
    [Parameter] public int? MaxHeight { get; set; }

    [Parameter] public string CssClass { get; set; } = string.Empty;

    private bool isOpen;
    private string DropdownClass => isOpen ? "show" : string.Empty;

    private void ToggleDropdown()
    {
        isOpen = !isOpen;
    }

    private void ToggleSelection(TItem item)
    {
        if (SelectedItems.Contains(item))
        {
            SelectedItems.Remove(item);
        }
        else
        {
            SelectedItems.Add(item);
        }

        StateHasChanged();
    }

    private bool IsSelected(TItem item)
    {
        return SelectedItems.Contains(item);
    }

    private string GetItemId(TItem item)
    {
        return $"{item.ToString()}-checkbox";
    }

}