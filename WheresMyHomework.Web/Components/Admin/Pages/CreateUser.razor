@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using WheresMyHomework.Data.Models.Users

@page "/Users/Create"

@inject UserManager<ApplicationUser> UserManager

@rendermode InteractiveServer

<PageTitle>Create new user | WMH</PageTitle>

@if (justCreated)
{
    <div class="alert alert-success">Successfully created new user!</div>
}

<main>
    <div class="card p-md-2">
        <h1 class="card-title">Create new user</h1>

        <section class="card-body m-2">
            <EditForm method="post" class="row gx-3" Model="userModel" FormName="CreateNewUser"
                      OnValidSubmit="async () => await CreateNewUserAsync()">
                <DataAnnotationsValidator/>

                <div class="row">
                    <div class="col-md-2">
                        @* Get the new user's title *@
                        <InputSelect class="form-control form-select" TValue="PersonTitle"
                                     @bind-Value="userModel.Title">
                            @foreach (var title in Enum.GetValues<PersonTitle>())
                            {
                                <option value="@title">@title</option>
                            }
                        </InputSelect>
                    </div>

                    <div class="col-md-3 form-floating">
                        @* Get first name *@
                        <InputText id="first-name-input" class="form-control" @bind-Value="userModel.FirstName"
                                   placeholder=" "/>
                        <label class="form-label" for="first-name-input">First name</label>
                    </div>

                    <div class="col-md-3 form-floating">
                        @* Get last name *@
                        <InputText id="last-name-input" class="form-control" @bind-Value="userModel.LastName"
                                   placeholder=" "/>
                        <label class="form-label" for="last-name-input">Last name</label>
                    </div>
                </div>

                <div class="row mt-3">
                    <div class="col-md-2">
                        @* Dropdown to select the user type (admin/teacher/student) *@
                        <InputSelect
                            class="form-control form-select mb-2"
                            TValue="UserType" @bind-Value="userModel.UserType">
                            <option value="@UserType.Admin">Admin</option>
                            <option value="@UserType.Teacher">Teacher</option>
                            <option value="@UserType.Student">Student</option>
                        </InputSelect>
                    </div>

                    <div class="col-md-4 form-floating mb-3">
                        @* Get email *@
                        <InputText id="email-input" @bind-Value="userModel.Email"
                                   class="form-control" placeholder=" " type="email"/>
                        <label class="form-label" for="email-input">Email address</label>

                    </div>
                </div>

                <div class="row">
                    <div class="mb-3 col-md-2">
                        <button class="btn btn-primary w-100" type="submit">Create user</button>
                    </div>
                </div>
            </EditForm>
        </section>
    </div>
</main>


@code {
    private bool justCreated;

    private enum UserType
    {
        Admin,
        Teacher,
        Student
    }

    private UserModel userModel = new();

    private class UserModel
    {
        [Required] public UserType UserType { get; set; } = UserType.Student;
        [Required] public PersonTitle Title { get; set; } = PersonTitle.Mr;
        [Required, EmailAddress] public string Email { get; set; } = string.Empty;

        [Required, MinLength(2), MaxLength(35)]
        public string FirstName { get; set; } = string.Empty;

        [Required, MinLength(2), MaxLength(35)]
        public string LastName { get; set; } = string.Empty;
    }


    private Admin CreateAdmin(AdminInfo adminInfo)
    {
        return new Admin
        {
            FirstName = userModel.FirstName,
            LastName = userModel.LastName,
            Email = userModel.Email,
            Title = userModel.Title,
            SchoolId = adminInfo.SchoolId,
            EmailConfirmed = true,
        };
    }

    // Creates a new user with no password
    private async Task CreateNewUserAsync()
    {
        // Get authentication info
        var adminAuth = await AdminAuthService.GetAuthenticatedUserInfoAsync();
        if (adminAuth is null) return;

        // Get admin info
        var adminInfo = await AdminService.GetAdminInfoAsync(adminAuth.UserId);

        // Create user depending on user type
        ApplicationUser user = userModel.UserType switch
        {
            UserType.Admin => CreateAdmin(adminInfo),
            UserType.Teacher => CreateTeacher(adminInfo),
            UserType.Student => CreateStudent(adminInfo),
            _ => throw new ApplicationException($"Unexpected user type, {userModel.UserType}")
        };

        // Get username from email
        var username = userModel.Email.Split('@')[0]; 
        
        await UserManager.SetUserNameAsync(user, username);
        await UserManager.SetEmailAsync(user, userModel.Email);
        
        // Create a user without a password
        var result = await UserManager.CreateAsync(user);
        if (!result.Succeeded) return;
        
        await UserManager.AddToRoleAsync(user, userModel.UserType.ToString());
        
        // Reset the form inputs
        userModel = new UserModel();

        justCreated = true;
    }

    private Student CreateStudent(AdminInfo adminInfo)
    {
        return new Student
        {
            FirstName = userModel.FirstName,
            LastName = userModel.LastName,
            Email = userModel.Email,
            Title = userModel.Title,
            SchoolId = adminInfo.SchoolId,
            EmailConfirmed = true,
        };
    }

    private Teacher CreateTeacher(AdminInfo adminInfo)
    {
        return new Teacher
        {
            FirstName = userModel.FirstName,
            LastName = userModel.LastName,
            Email = userModel.Email,
            Title = userModel.Title,
            SchoolId = adminInfo.SchoolId,
            EmailConfirmed = true,
        };
    }


}