@using WheresMyHomework.Core.Services.SubjectService
@using WheresMyHomework.Core.Services.TagService
@using WheresMyHomework.Core.Services.TodoService
@using WheresMyHomework.Data.Models
@using WheresMyHomework.Web.Components.Common

@page "/Homework/{Id:int}"

@rendermode InteractiveServer

@inject ITeacherService TeacherService
@inject ISubjectService SubjectService
@inject ITodoService TodoService
@inject ITagService TagService

@inject NavigationManager Navigator

<NoScroll />

<PageTitle>@_homeworkInfo.Title | WMH</PageTitle>

@* SPA application means that the scroll memory is kept between pages. As a result, scroll to bottom of homework when loaded *@
<script defer>
    window.scrollTo(0, 0, "instant")
</script>

<div class="container mt-4">
    <div class="row">
        <main class="col-md-8 mb-3">
            <article class="card">
                <div class="card-body">
                    <span class="d-flex align-items-center">
                        <h1 class="card-title mb-2">@_homeworkInfo.Title</h1>
                    </span>

                    <h6 class="card-subtitle text-muted mb-0">
                        <a class="link-primary" href="/Chat/@_teacherInfo.Id/@_teacherInfo.Title @_teacherInfo.LastName">
                            @_teacherInfo.Title. @_teacherInfo.LastName
                        </a> -
                        <span class="text-secondary">@_subjectInfo.Name</span>
                    </h6>

                    <div class="mt-2">
                        <span>
                            <InputSelect TValue="Priority" id="priority-switch"
                                         class=@($"badge me-2 {_priorityCssMap[_homeworkModel.Priority]}")
                                         style="border: 0"
                                         Value="_homeworkModel.Priority"
                                         ValueExpression="() => _homeworkModel.Priority"
                                         ValueChanged="async newPriority => { _homeworkModel.Priority = newPriority; await OnPriorityUpdatedAsync(); }">
                                <option value="@Priority.None">No priority</option>
                                <option value="@Priority.Low">Low priority</option>
                                <option value="@Priority.Medium">Medium priority</option>
                                <option value="@Priority.High">High priority</option>
                            </InputSelect>
                            
                            <button class="empty-button" @onclick="async () => await ToggleCompletionStatusAsync()">
                                <span class="badge @(_isComplete ? "bg-success" : "bg-danger")">
                                    @(_isComplete ? "Complete" : "Incomplete")
                                </span>
                            </button>
                        </span>
                    </div>

                    <div class="mt-3">
                        <p><strong>Due:</strong> @_homeworkInfo.DueDate.ToString("d")</p>
                        <p><strong>Set:</strong> @_homeworkInfo.SetDate.ToString("d")</p>
                    </div>

                    <div class="card">
                        <div
                            class="mt-3 mb-3 ms-3">@((MarkupString)_homeworkInfo.Description.Replace("\n", "<br />"))</div>
                    </div>
                </div>
            </article>
            <section class="card mt-2">
                <div class="flex mt-2 ms-2 align-items-center">
                    <i class="bi bi-tags ms-1 me-2"></i>

                    @foreach (var tag in _tags)
                    {
                        <span class="badge bg-secondary mx-1 py-2 my-1 border-secondary "
                              @onmouseover="() => mousedOverTagName = tag.Name"
                              @onmouseleave="() => mousedOverTagName = null">
                            
                            <p class="d-inline mx-1 my-auto">@tag.Name</p>
                            @if (_mousedOverTagName == tag.Name)
                            {
                                <button class="btn bi bi-trash-fill ratio-1x1 p-0 m-0" type="button"
                                        @onclick="async () => await DeleteTagAsync(tag.Name)"></button>
                            }
                        </span>
                    }
                    <span class="d-inline-flex ms-4 align-items-center">
                        <EditForm Model="_homeworkModel" FormName="AddTag"
                                  OnValidSubmit="async () => await AddTagAsync()" class="w-50">
                            <InputText class="form-control form-text ms-1 mb-2"
                                       @bind-Value="@_homeworkModel.NewTagName"></InputText>
                        </EditForm>
                    </span>
                </div>
            </section>
        </main>

        <aside class="col-md-4" style="height: 100vh">
            <section class="card mb-3" id="todo-list-container" @onmouseout="() => _mousedOverTodoId = null">
                <h5 class="card-body card-title pb-0">To-do</h5>
                <div class="card-body overflow-y-scroll pt-0">
                    <ul class="list-group list-group-flush">
                        @foreach (var todo in _todos)
                        {
                            @if (_editedTodoId == todo.Id)
                            {
                                <li class="list-group-item py-2 d-flex align-items-center">
                                    <EditForm Model="_homeworkModel" FormName="UpdateTodoDescription"
                                              OnValidSubmit="async () => await UpdateTodoDescriptionAsync()">
                                        <InputText class="form-control-plaintext pe-1"
                                                   @bind-Value="_homeworkModel.EditedTodoDescription"/>
                                        <button hidden type="submit"></button>
                                    </EditForm>
                                    <button class="btn bi bi-x-square bg-danger text-white px-1 py-0 ratio-1x1"
                                            @onclick="() => _editedTodoId = null"
                                            type="button"></button>
                                </li>
                            }
                            else
                            {
                                <li class="list-group-item py-2 d-flex align-items-center"
                                    @onmouseover="() => _mousedOverTodoId = todo.Id">
                                    <InputCheckbox
                                        class="my-2"
                                        Value="@todo.IsComplete"
                                        ValueExpression="() => todo.IsComplete"
                                        ValueChanged="async isComplete => { await UpdateTodoStatusAsync(todo.Id, isComplete); todo.IsComplete = isComplete; }"/>
                                    <p class="p-1 overflow-visible my-auto"
                                       @onclick="() => { 
                                           _editedTodoId = todo.Id;
                                           _homeworkModel.EditedTodoDescription = todo.Description;
                                            
                                           StateHasChanged();
                                       }">
                                        @todo.Description
                                    </p>

                                    @if (_mousedOverTodoId == todo.Id)
                                    {
                                        <div class="">
                                            <button class="btn bi bi-pencil-square p-0 m-0"
                                                    @onclick="() => {
                                                        _editedTodoId = todo.Id;
                                                        _homeworkModel.EditedTodoDescription = todo.Description;
                                                        
                                                        StateHasChanged();
                                                    }"></button>
                                            <button class="btn bi bi-trash-fill px-1 btn-danger p-0 m-0 ratio-1x1"
                                                    @onclick="() => { 
                                                        _todos.Remove(todo);
                                                        TodoService.DeleteTodoAsync(todo.Id);
                                                        StateHasChanged();
                                                    }"></button>
                                        </div>
                                    }
                                </li>
                            }
                        }
                        <li class="list-group-item">
                            <EditForm Model="_homeworkModel" OnValidSubmit="async () => await AddNewTodo()"
                                      FormName="AddNewTodo">
                                <InputText @ref="_newTodoInput" class="form-control"
                                           placeholder="Type here to add more"
                                           @bind-Value="_homeworkModel.NewTodoDescription"></InputText>
                            </EditForm>
                        </li>
                    </ul>
                </div>
            </section>

            <section class="card h-auto mb-4" id="notes-container">
                <div class="card-body">
                    <h5 class="card-title">Notes</h5>

                    <InputTextArea
                        id="notes-input" class="form-control-plaintext h-75 mt-4"
                        @bind-Value="@_homeworkModel.NotesDescription"
                        placeholder="Type here to begin writing notes!"
                        @oninput="async (e) => 
                        { 
                            await OnNoteUpdate((string?)e.Value ?? string.Empty); 
                            _homeworkModel.NotesDescription = (string?)e.Value ?? string.Empty; 
                        }"
                    >
                        @_homeworkInfo.Notes
                    </InputTextArea>

                </div>
            </section>

            <div class="px-2 text-secondary fs-6 py-0">
                @if (_notesAutoSaveTimer is not null)
                {
                    @if (!_noteIsUpdating)
                    {
                        <p>Saved!</p>
                    }
                    else
                    {
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                    }
                }
            </div>
        </aside>

    </div>
</div>