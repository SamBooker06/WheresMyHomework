@using System.ComponentModel.DataAnnotations
@using System.Diagnostics
@using WheresMyHomework.Core.Services.Homework.DTO
@using WheresMyHomework.Core.Services.Homework.DTO.Response
@using WheresMyHomework.Core.Services.SubjectService
@using WheresMyHomework.Core.Services.TodoService
@using WheresMyHomework.Core.Services.Users

@page "/Homework/{Id:int}"

@rendermode InteractiveServer

@inject ITeacherService TeacherService
@inject ISubjectService SubjectService
@inject ITodoService TodoService
@inject NavigationManager Navigator

@* SPA application means that the scroll memory is kept between pages. As a result, scroll to bottom of homework when loaded *@
<script defer>
    window.scrollTo(0, 0, "instant")
</script>

<div class="container mt-4">
    <div class="row">
        <main class="col-md-8 mb-3">
            <article class="card">
                <div class="card-body">
                    <span class="d-flex align-items-center">
                        <h1 class="card-title mb-0">@HomeworkInfo.Title</h1>
                        <button class="btn btn-outline-secondary btn-primary btn-sm mt-2 ms-3"> Mark
                            as @(HomeworkInfo.IsComplete ? "incomplete" : "complete")</button>
                    </span>
                    <h6 class="card-subtitle text-muted">@TeacherInfo.Title @TeacherInfo.LastName -
                        <span
                            class="text-primary">@SubjectInfo.Name</span></h6>

                    <div class="mt-3 d-flex flex-column align-items-start">
                        @* Determine badge from priority *@
                        <span class="">
                            <span class="badge bg-success">@HomeworkInfo.Priority Priority</span>
                            <span
                                class="badge bg-danger ms-2">@(HomeworkInfo.IsComplete ? "COMPLETE" : "INCOMPLETE")</span>
                        </span>

                    </div>

                    <div class="mt-3">
                        <p><strong>Due:</strong> @HomeworkInfo.DueDate.ToString("d")</p>
                        <p><strong>Set:</strong> @HomeworkInfo.SetDate.ToString("d")</p>
                    </div>

                    <div class="card">
                        <div class="mt-3 mb-3 ms-3">@HomeworkInfo.Description</div>
                    </div>
                </div>
            </article>
        </main>

        <aside class="col-md-4" style="height: 100vh">
            <section class="card mb-3" id="todo-list-container">
                <h5 class="card-body card-title pb-0">To-do</h5>
                <div class="card-body overflow-y-scroll pt-0">
                    <ul class="list-group list-group-flush">
                        @foreach (var todo in Todos)
                        {
                            <li class="list-group-item">
                                <InputCheckbox @bind-Value="@todo.IsComplete"
                                               @onchange="e => UpdateTodoCompletion(todo.Id, (bool)(e.Value ?? false))"></InputCheckbox> @todo.Description

                            </li>
                        }
                        <li class="list-group-item">
                            <EditForm Model="NewTodo" OnValidSubmit="async () => await AddNewTodo(NewTodo)"
                                      FormName="AddNewTodo">
                                <InputText @ref="newTodoInput" class="form-control"
                                           placeholder="Type here to add more"
                                           @bind-Value="NewTodo.Description"></InputText>
                            </EditForm>
                        </li>
                    </ul>
                </div>
            </section>

            <section class="card h-auto mb-4" id="notes-container">
                <div class="card-body">
                    <h5 class="card-title">Notes</h5>
                    @* TODO: Allow for modifying and HTML markup *@

                    @* Save in real-time using SignalR *@
                    <InputTextArea id="notes-input" class="form-control-plaintext h-75 mt-4"
                                   @bind-Value="@Notes.Description"
                                   placeholder="Type here to begin writing notes!">@HomeworkInfo.Notes</InputTextArea>
                </div>
            </section>
        </aside>

    </div>
</div>

@code {
    [Parameter] public int Id { get; init; }
    private StudentHomeworkResponseInfo HomeworkInfo { get; set; } = null!;
    private TeacherInfo TeacherInfo { get; set; } = null!;
    private SubjectResponseInfo SubjectInfo { get; set; } = null!;

    private ICollection<TodoResponseInfo> Todos { get; set; } = null!;

    private NewTodoModel NewTodo { get; set; } = new();
    private NotesModel Notes { get; set; } = new();

    private ICollection<TodoRequestInfo> newTodos = new List<TodoRequestInfo>();

    private InputText newTodoInput { get; set; }
    private bool _shouldFocusOnNewTodo;

    protected override async Task OnInitializedAsync()
    {
        var student = await StudentAuthService.GetAuthenticatedUserInfoAsync();
        Debug.Assert(student != null);

        HomeworkInfo = await HomeworkService.GetStudentHomeworkInfoByIdAsync(Id, student.UserId);
        TeacherInfo = await TeacherService.GetTeacherByHomeworkIdAsync(Id);
        SubjectInfo = await SubjectService.GetSubjectInfoAsync(HomeworkInfo.Class.SubjectId);
        Todos = new List<TodoResponseInfo>(HomeworkInfo.Todos);
        Notes.Description = HomeworkInfo.Notes;
    }

    private void UpdateTodoCompletion(int todoId, bool isComplete)
    {
        throw new NotImplementedException();
    }

    private async Task AddNewTodo(NewTodoModel newTodo)
    {
        var todoRequest = new TodoRequestInfo
        {
            StudentHomeworkTaskId = HomeworkInfo.StudentHomeworkId,
            Description = newTodo.Description,
            IsComplete = false
        };

        var todoResponse = await TodoService.CreateNewTodoAsync(todoRequest);

        // Clear post data
        Navigator.NavigateTo($"Homework/{Id}");

        Todos.Add(todoResponse);
        NewTodo = new NewTodoModel(); // Clear form data
        _shouldFocusOnNewTodo = true;
        StateHasChanged();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_shouldFocusOnNewTodo && (bool)newTodoInput?.Element.HasValue) await newTodoInput.Element!.Value.FocusAsync();
        _shouldFocusOnNewTodo = false;
    }

    private class NewTodoModel
    {
        [Required]
        [MinLength(3), MaxLength(35)]
        public string Description { get; set; } = string.Empty;
    }

    private class NotesModel
    {
        public string Description { get; set; } = string.Empty;
    }

}