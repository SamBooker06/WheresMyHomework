@using WheresMyHomework.Core.Services.SubjectService
@using WheresMyHomework.Core.Services.TagService
@using WheresMyHomework.Core.Services.TodoService
@using WheresMyHomework.Data.Models

@rendermode InteractiveServer

@inject ITeacherService TeacherService
@inject ISubjectService SubjectService
@inject ITodoService TodoService
@inject ITagService TagService
@inject ILogger<HomeworkDetailView> Logger

@inject NavigationManager Navigator

@if (homeworkInfo is null || teacherInfo is null || subjectInfo is null)
{
    <p class="text-danger">There was a problem loading this task</p>
}
else
{
    <PageTitle>@homeworkInfo.Title | WMH</PageTitle>

    @* SPA application means that the scroll memory is kept between pages. As a result, scroll to bottom of homework when loaded *@
    <script defer>
        window.scrollTo(0, 0, "instant")
    </script>

    <div class="container mt-4">
        <div class="row">
            <main class="col-md-8 mb-3">
                <article class="card">
                    <div class="card-body">
                        @* Homework title *@
                        <span class="d-flex align-items-center">
                        <h1 class="card-title mb-2">@homeworkInfo.Title</h1>
                    </span>

                        @* Primary info *@
                        <h6 class="card-subtitle text-muted mb-0">
                            <a class="link-primary"
                               href="/Chat/@teacherInfo.Id/@teacherInfo.Title @teacherInfo.LastName">
                                @teacherInfo.Title. @teacherInfo.LastName
                            </a> -
                            <span class="text-secondary">@subjectInfo.Name</span>
                        </h6>

                        <div class="mt-2">
                        <span>
                            @* Priority *@
                            <InputSelect TValue="Priority" id="priority-switch"
                                         class=@($"badge me-2 {priorityCssMap[homeworkModel.Priority]}")
                                         style="border: 0"
                                         Value="homeworkModel.Priority"
                                         ValueExpression="() => homeworkModel.Priority"
                                         ValueChanged="async newPriority => { homeworkModel.Priority = newPriority; await UpdateHomeworkPriorityAsync(); }">
                                <option value="@Priority.None">No priority</option>
                                <option value="@Priority.Low">Low priority</option>
                                <option value="@Priority.Medium">Medium priority</option>
                                <option value="@Priority.High">High priority</option>
                            </InputSelect>

                            @* Completion status *@
                            <button class="empty-button" @onclick="async () => await ToggleCompletionStatusAsync()">
                                <span class="badge @(isComplete ? "bg-success" : "bg-danger")">
                                    @(isComplete ? "Complete" : "Incomplete")
                                </span>
                            </button>
                        </span>
                        </div>

                        @* Due/set dates *@
                        <div class="mt-3">
                            <p><strong>Due:</strong> @homeworkInfo.DueDate.ToString("d")</p>
                            <p><strong>Set:</strong> @homeworkInfo.SetDate.ToString("d")</p>
                        </div>

                        @* Task description *@
                        <div class="card">
                            <div
                                class="mt-3 mb-3 ms-3">@((MarkupString)homeworkInfo.Description.Replace("\n", "<br />"))</div>
                        </div>
                    </div>
                </article>

                @* Tags *@
                <section class="card mt-2">
                    <div class="flex mt-2 ms-2 align-items-center">
                        <i class="bi bi-tags ms-1 me-2"></i>

                        @* List existing tags *@
                        @foreach (var tag in tags)
                        {
                            <span class="badge bg-secondary mx-1 py-2 my-1 border-secondary "
                                  @onmouseover="() => mousedOverTagName = tag.Name"
                                  @onmouseleave="() => mousedOverTagName = null">
                                
                                <p class="d-inline mx-1 my-auto">@tag.Name</p>

                                @* Display delete button when hovered over *@
                                @if (mousedOverTagName == tag.Name)
                                {
                                    <button class="btn bi bi-trash-fill ratio-1x1 p-0 m-0" type="button"
                                            @onclick="async () => await DeleteTagAsync(tag.Name)"></button>
                                }
                            </span>
                        }

                        @* Add new tag *@
                        <span class="d-inline-flex ms-4 align-items-center">
                            <EditForm Model="homeworkModel" FormName="AddTag"
                                      OnValidSubmit="async () => await AddTagAsync()" class="w-50">
                                <InputText class="form-control form-text ms-1 mb-2"
                                           @bind-Value="@homeworkModel.NewTagName"></InputText>
                            </EditForm>
                        </span>
                    </div>
                </section>
            </main>

            @* Notes and todos *@
            <aside class="col-md-4" style="height: 100vh">
                <section class="card mb-3" id="todo-list-container" @onmouseout="() => mousedOverTodoId = null">
                    <h5 class="card-body card-title pb-0">To-do</h5>
                    <div class="card-body overflow-y-scroll pt-0">
                        @* List all todos *@
                        <ul class="list-group list-group-flush">
                            @foreach (var todo in todos)
                            {
                                // If this todo is being edited
                                @if (editedTodoId == todo.Id)
                                {
                                    <li class="list-group-item py-2 d-flex align-items-center">
                                        <EditForm Model="homeworkModel" FormName="UpdateTodoDescription"
                                                  OnValidSubmit="async () => await UpdateTodoDescriptionAsync()">
                                            <InputText class="form-control-plaintext pe-1"
                                                       @bind-Value="homeworkModel.EditedTodoDescription"/>
                                            <button hidden type="submit"></button>
                                        </EditForm>
                                        <button class="btn bi bi-x-square bg-danger text-white px-1 py-0 ratio-1x1"
                                                @onclick="() => editedTodoId = null"
                                                type="button"></button>
                                    </li>
                                }
                                else
                                {
                                    <li class="list-group-item py-2 d-flex align-items-center"
                                        @onmouseover="() => mousedOverTodoId = todo.Id">
                                        <InputCheckbox
                                            class="my-2"
                                            Value="@todo.IsComplete"
                                            ValueExpression="() => todo.IsComplete"
                                            ValueChanged="async newStatus => { await UpdateTodoStatusAsync(todo.Id, newStatus); todo.IsComplete = newStatus; }"/>
                                        <p class="p-1 overflow-visible my-auto"
                                           @onclick="() => { editedTodoId = todo.Id; homeworkModel.EditedTodoDescription = todo.Description; StateHasChanged(); }">
                                            @todo.Description
                                        </p>

                                        @* On hover over todo *@
                                        @if (mousedOverTodoId == todo.Id)
                                        {
                                            <div class="">
                                                <button class="btn bi bi-pencil-square p-0 m-0"
                                                        @onclick="() => { editedTodoId = todo.Id; homeworkModel.EditedTodoDescription = todo.Description; StateHasChanged(); }"></button>
                                                <button class="btn bi bi-trash-fill px-1 btn-danger p-0 m-0 ratio-1x1"
                                                        @onclick="() => { todos.Remove(todo); TodoService.DeleteTodoAsync(todo.Id); StateHasChanged(); }"></button>
                                            </div>
                                        }
                                    </li>
                                }
                            }

                            @* Create new todo *@
                            <li class="list-group-item">
                                <EditForm Model="homeworkModel" OnValidSubmit="async () => await AddNewTodoAsync()"
                                          FormName="AddNewTodo">
                                    <InputText @ref="newTodoInput" class="form-control"
                                               placeholder="Type here to add more"
                                               @bind-Value="homeworkModel.NewTodoDescription"></InputText>
                                </EditForm>
                            </li>
                        </ul>
                    </div>
                </section>

                @* Notes *@
                <section class="card h-auto mb-4" id="notes-container">
                    <div class="card-body">
                        <h5 class="card-title">Notes</h5>

                        <InputTextArea
                            id="notes-input" class="form-control-plaintext h-75 mt-4"
                            @bind-Value="@homeworkModel.NotesDescription"
                            placeholder="Type here to begin writing notes!"
                            @oninput="async (e) =>
                        {
                            await UpdateNotesAsync((string?)e.Value ?? string.Empty);
                            homeworkModel.NotesDescription = (string?)e.Value ?? string.Empty;
                        }"
                        >
                            @homeworkInfo.Notes
                        </InputTextArea>

                    </div>
                </section>

                @* Notes save indicator *@
                <div class="px-2 text-secondary fs-6 py-0">
                    @if (notesAutoSaveTimer is not null)
                    {
                        @if (!noteIsUpdating)
                        {
                            <p>Saved!</p>
                        }
                        else
                        {
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                        }
                    }
                </div>
            </aside>

        </div>
    </div>
}